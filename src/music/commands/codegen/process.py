"""Codegen processing functions."""

import os
import subprocess
from pathlib import Path

from music.commands.render.result import _cmd_for_stats


def main(example_audio_file: Path) -> None:
    """Generate a parser for the stats output of ffmpeg.

    ffmpeg's output is verbose and not easily parsed. A parser would be brittle
    to maintain by hand. Have AI write it for us.
    """
    import openai

    openai.api_key = os.environ["OPENAI_API_KEY"]

    fn_name = "parse_summary_stats"

    cmd = _cmd_for_stats(example_audio_file)
    proc = subprocess.run(cmd, check=True, stderr=subprocess.PIPE, text=True)
    proc_output = proc.stderr

    messages: list[openai.types.chat.ChatCompletionMessageParam] = [
        {
            "role": "system",
            "content": (
                "You are a CLI that writes Python source code. Do not converse. Do not"
                " show examples. Only respond in Python source code. Always include"
                " function argument and return type annotations. Always include module"
                " docstrings and function docstrings. At the top of any file, on line"
                " 1, document that the file is autogenerated and not to modify it by"
                " hand. Disable type checking on lines that return Optionals."
            ),
        },
        {
            "role": "user",
            "content": (
                f"Write a Python file containing a function named {fn_name} to parse"
                " the following output for audio duration, max volume, LUFS-I, and"
                " LRA. Use regular expressions. Return the values in a"
                f" dict.\n\n{proc_output}"
            ),
        },
    ]
    response = openai.chat.completions.create(
        model="gpt-3.5-turbo", messages=messages, temperature=0
    )
    message = response.choices[0].message
    if message.content is None:
        raise Exception(f"No content in message from GPT: {message}")

    lines = message.content.splitlines()
    if lines[0].startswith("```"):
        lines = lines[1:]
    if lines[-1].startswith("```"):
        lines = lines[:-1]

    out_fil = Path(__file__).parent / "__codegen__" / "stats.py"
    out_fil.write_text("\n".join(lines))

    print(response.usage)
