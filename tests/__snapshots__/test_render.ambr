# serializer version: 1
# name: test_main_all_versions
  '''
  Stub Song Title
  TMP_PATH_HERE/Stub Song Title/Stub Song Title.wav
             ╷        ╷        
             │ Before │ After  
  ╶──────────┼────────┼───────╴
    duration │        │ 1.0    
    size     │        │ 42.0   
             ╵        ╵        
   Rendered in 0:00:00, a infx 
             speedup           
  
  Stub Song Title (Instrumental)
  TMP_PATH_HERE/Stub Song Title/Stub Song Title (Instrumental).wav
             ╷        ╷        
             │ Before │ After  
  ╶──────────┼────────┼───────╴
    duration │        │ 250.1  
    size     │        │ 1024   
             ╵        ╵        
   Rendered in 0:00:00, a infx 
             speedup           
  
  Stub Song Title (A Cappella)
  TMP_PATH_HERE/Stub Song Title/Stub Song Title (A Cappella).wav
             ╷        ╷        
             │ Before │ After  
  ╶──────────┼────────┼───────╴
    duration │        │ 1.0    
    size     │        │ 42.0   
             ╵        ╵        
   Rendered in 0:00:00, a infx 
             speedup           
  
  '''
# ---
# name: test_main_all_versions.1
  _CallList([
    _Call(
      'set_info_string',
      tuple(
        'RENDER_PATTERN',
        'Stub Song Title.tmp',
      ),
      dict({
      }),
    ),
    _Call(
      'perform_action',
      tuple(
        42230,
      ),
      dict({
      }),
    ),
    _Call(
      'set_info_string',
      tuple(
        'RENDER_PATTERN',
        '$project',
      ),
      dict({
      }),
    ),
    _Call(
      'set_info_string',
      tuple(
        'RENDER_PATTERN',
        'Stub Song Title (Instrumental).tmp',
      ),
      dict({
      }),
    ),
    _Call(
      'perform_action',
      tuple(
        42230,
      ),
      dict({
      }),
    ),
    _Call(
      'set_info_string',
      tuple(
        'RENDER_PATTERN',
        '$project',
      ),
      dict({
      }),
    ),
    _Call(
      'set_info_string',
      tuple(
        'RENDER_PATTERN',
        'Stub Song Title (A Cappella).tmp',
      ),
      dict({
      }),
    ),
    _Call(
      'perform_action',
      tuple(
        42230,
      ),
      dict({
      }),
    ),
    _Call(
      'set_info_string',
      tuple(
        'RENDER_PATTERN',
        '$project',
      ),
      dict({
      }),
    ),
    _Call(
      'save',
      tuple(
      ),
      dict({
      }),
    ),
  ])
# ---
# name: test_main_all_versions.2
  _CallList([
    _Call(
      tuple(
        list([
          'ffmpeg',
          '-i',
          'TMP_PATH_HERE/Stub Song Title/Stub Song Title.wav',
          '-filter:a',
          'volumedetect,ebur128=framelog=verbose',
          '-hide_banner',
          '-nostats',
          '-f',
          'null',
          '/dev/null',
        ]),
      ),
      dict({
        'check': True,
        'stderr': -1,
        'text': True,
      }),
    ),
    _Call(
      tuple(
        list([
          'ffmpeg',
          '-i',
          'TMP_PATH_HERE/Stub Song Title/Stub Song Title (Instrumental).wav',
          '-filter:a',
          'volumedetect,ebur128=framelog=verbose',
          '-hide_banner',
          '-nostats',
          '-f',
          'null',
          '/dev/null',
        ]),
      ),
      dict({
        'check': True,
        'stderr': -1,
        'text': True,
      }),
    ),
    _Call(
      tuple(
        list([
          'ffmpeg',
          '-i',
          'TMP_PATH_HERE/Stub Song Title/Stub Song Title (A Cappella).wav',
          '-filter:a',
          'areverse,atrim=start=0.2,silenceremove=start_periods=1:start_silence=3.0:start_threshold=0.02,areverse,atrim=start=0.2,silenceremove=start_periods=1:start_silence=1.0:start_threshold=0.02',
          'TMP_PATH_HERE/Stub Song Title/Stub Song Title (A Cappella).wav.tmp.wav',
        ]),
      ),
      dict({
        'check': True,
        'stderr': -1,
        'text': True,
      }),
    ),
    _Call(
      tuple(
        list([
          'ffmpeg',
          '-i',
          'TMP_PATH_HERE/Stub Song Title/Stub Song Title (A Cappella).wav',
          '-filter:a',
          'volumedetect,ebur128=framelog=verbose',
          '-hide_banner',
          '-nostats',
          '-f',
          'null',
          '/dev/null',
        ]),
      ),
      dict({
        'check': True,
        'stderr': -1,
        'text': True,
      }),
    ),
  ])
# ---
# name: test_main_default_versions
  '''
  Stub Song Title
  TMP_PATH_HERE/Stub Song Title/Stub Song Title.wav
             ╷        ╷        
             │ Before │ After  
  ╶──────────┼────────┼───────╴
    duration │        │ 1.0    
    size     │        │ 42.0   
             ╵        ╵        
   Rendered in 0:00:00, a infx 
             speedup           
  
  Stub Song Title (Instrumental)
  TMP_PATH_HERE/Stub Song Title/Stub Song Title (Instrumental).wav
             ╷        ╷        
             │ Before │ After  
  ╶──────────┼────────┼───────╴
    duration │        │ 250.1  
    size     │        │ 1024   
             ╵        ╵        
   Rendered in 0:00:00, a infx 
             speedup           
  
  Stub Song Title (A Cappella)
  TMP_PATH_HERE/Stub Song Title/Stub Song Title (A Cappella).wav
             ╷        ╷        
             │ Before │ After  
  ╶──────────┼────────┼───────╴
    duration │        │ 1.0    
    size     │        │ 42.0   
             ╵        ╵        
   Rendered in 0:00:00, a infx 
             speedup           
  
  '''
# ---
# name: test_main_default_versions.1
  _CallList([
    _Call(
      'set_info_string',
      tuple(
        'RENDER_PATTERN',
        'Stub Song Title.tmp',
      ),
      dict({
      }),
    ),
    _Call(
      'perform_action',
      tuple(
        42230,
      ),
      dict({
      }),
    ),
    _Call(
      'set_info_string',
      tuple(
        'RENDER_PATTERN',
        '$project',
      ),
      dict({
      }),
    ),
    _Call(
      'set_info_string',
      tuple(
        'RENDER_PATTERN',
        'Stub Song Title (Instrumental).tmp',
      ),
      dict({
      }),
    ),
    _Call(
      'perform_action',
      tuple(
        42230,
      ),
      dict({
      }),
    ),
    _Call(
      'set_info_string',
      tuple(
        'RENDER_PATTERN',
        '$project',
      ),
      dict({
      }),
    ),
    _Call(
      'set_info_string',
      tuple(
        'RENDER_PATTERN',
        'Stub Song Title (A Cappella).tmp',
      ),
      dict({
      }),
    ),
    _Call(
      'perform_action',
      tuple(
        42230,
      ),
      dict({
      }),
    ),
    _Call(
      'set_info_string',
      tuple(
        'RENDER_PATTERN',
        '$project',
      ),
      dict({
      }),
    ),
    _Call(
      'save',
      tuple(
      ),
      dict({
      }),
    ),
  ])
# ---
# name: test_main_default_versions.2
  _CallList([
    _Call(
      tuple(
        list([
          'ffmpeg',
          '-i',
          'TMP_PATH_HERE/Stub Song Title/Stub Song Title.wav',
          '-filter:a',
          'volumedetect,ebur128=framelog=verbose',
          '-hide_banner',
          '-nostats',
          '-f',
          'null',
          '/dev/null',
        ]),
      ),
      dict({
        'check': True,
        'stderr': -1,
        'text': True,
      }),
    ),
    _Call(
      tuple(
        list([
          'ffmpeg',
          '-i',
          'TMP_PATH_HERE/Stub Song Title/Stub Song Title (Instrumental).wav',
          '-filter:a',
          'volumedetect,ebur128=framelog=verbose',
          '-hide_banner',
          '-nostats',
          '-f',
          'null',
          '/dev/null',
        ]),
      ),
      dict({
        'check': True,
        'stderr': -1,
        'text': True,
      }),
    ),
    _Call(
      tuple(
        list([
          'ffmpeg',
          '-i',
          'TMP_PATH_HERE/Stub Song Title/Stub Song Title (A Cappella).wav',
          '-filter:a',
          'areverse,atrim=start=0.2,silenceremove=start_periods=1:start_silence=3.0:start_threshold=0.02,areverse,atrim=start=0.2,silenceremove=start_periods=1:start_silence=1.0:start_threshold=0.02',
          'TMP_PATH_HERE/Stub Song Title/Stub Song Title (A Cappella).wav.tmp.wav',
        ]),
      ),
      dict({
        'check': True,
        'stderr': -1,
        'text': True,
      }),
    ),
    _Call(
      tuple(
        list([
          'ffmpeg',
          '-i',
          'TMP_PATH_HERE/Stub Song Title/Stub Song Title (A Cappella).wav',
          '-filter:a',
          'volumedetect,ebur128=framelog=verbose',
          '-hide_banner',
          '-nostats',
          '-f',
          'null',
          '/dev/null',
        ]),
      ),
      dict({
        'check': True,
        'stderr': -1,
        'text': True,
      }),
    ),
  ])
# ---
# name: test_main_filenames_all_versions
  '''
  Stub Song Title
  TMP_PATH_HERE/Stub Song Title/Stub Song Title.wav
             ╷        ╷        
             │ Before │ After  
  ╶──────────┼────────┼───────╴
    duration │        │ 1.0    
    size     │        │ 42.0   
             ╵        ╵        
   Rendered in 0:00:00, a infx 
             speedup           
  
  Stub Song Title (Instrumental)
  TMP_PATH_HERE/Stub Song Title/Stub Song Title (Instrumental).wav
             ╷        ╷        
             │ Before │ After  
  ╶──────────┼────────┼───────╴
    duration │        │ 250.1  
    size     │        │ 1024   
             ╵        ╵        
   Rendered in 0:00:00, a infx 
             speedup           
  
  Stub Song Title (A Cappella)
  TMP_PATH_HERE/Stub Song Title/Stub Song Title (A Cappella).wav
             ╷        ╷        
             │ Before │ After  
  ╶──────────┼────────┼───────╴
    duration │        │ 1.0    
    size     │        │ 42.0   
             ╵        ╵        
   Rendered in 0:00:00, a infx 
             speedup           
  Stub Song Title
  TMP_PATH_HERE/Stub Song Title/Stub Song Title.wav
             ╷        ╷        
             │ Before │ After  
  ╶──────────┼────────┼───────╴
    duration │ 250.1  │ 1.0    
    size     │ 1024   │ 42.0   
             ╵        ╵        
   Rendered in 0:00:00, a infx 
             speedup           
  
  Stub Song Title (Instrumental)
  TMP_PATH_HERE/Stub Song Title/Stub Song Title (Instrumental).wav
             ╷        ╷        
             │ Before │ After  
  ╶──────────┼────────┼───────╴
    duration │ 250.1  │ 1.0    
    size     │ 1024   │ 42.0   
             ╵        ╵        
   Rendered in 0:00:00, a infx 
             speedup           
  
  Stub Song Title (A Cappella)
  TMP_PATH_HERE/Stub Song Title/Stub Song Title (A Cappella).wav
             ╷        ╷        
             │ Before │ After  
  ╶──────────┼────────┼───────╴
    duration │ 250.1  │ 1.0    
    size     │ 1024   │ 42.0   
             ╵        ╵        
   Rendered in 0:00:00, a infx 
             speedup           
  
  '''
# ---
# name: test_main_filenames_all_versions.1
  _CallList([
    _Call(
      'set_info_string',
      tuple(
        'RENDER_PATTERN',
        'Stub Song Title.tmp',
      ),
      dict({
      }),
    ),
    _Call(
      'perform_action',
      tuple(
        42230,
      ),
      dict({
      }),
    ),
    _Call(
      'set_info_string',
      tuple(
        'RENDER_PATTERN',
        '$project',
      ),
      dict({
      }),
    ),
    _Call(
      'set_info_string',
      tuple(
        'RENDER_PATTERN',
        'Stub Song Title (Instrumental).tmp',
      ),
      dict({
      }),
    ),
    _Call(
      'perform_action',
      tuple(
        42230,
      ),
      dict({
      }),
    ),
    _Call(
      'set_info_string',
      tuple(
        'RENDER_PATTERN',
        '$project',
      ),
      dict({
      }),
    ),
    _Call(
      'set_info_string',
      tuple(
        'RENDER_PATTERN',
        'Stub Song Title (A Cappella).tmp',
      ),
      dict({
      }),
    ),
    _Call(
      'perform_action',
      tuple(
        42230,
      ),
      dict({
      }),
    ),
    _Call(
      'set_info_string',
      tuple(
        'RENDER_PATTERN',
        '$project',
      ),
      dict({
      }),
    ),
    _Call(
      'save',
      tuple(
      ),
      dict({
      }),
    ),
    _Call(
      'set_info_string',
      tuple(
        'RENDER_PATTERN',
        'Stub Song Title.tmp',
      ),
      dict({
      }),
    ),
    _Call(
      'perform_action',
      tuple(
        42230,
      ),
      dict({
      }),
    ),
    _Call(
      'set_info_string',
      tuple(
        'RENDER_PATTERN',
        '$project',
      ),
      dict({
      }),
    ),
    _Call(
      'set_info_string',
      tuple(
        'RENDER_PATTERN',
        'Stub Song Title (Instrumental).tmp',
      ),
      dict({
      }),
    ),
    _Call(
      'perform_action',
      tuple(
        42230,
      ),
      dict({
      }),
    ),
    _Call(
      'set_info_string',
      tuple(
        'RENDER_PATTERN',
        '$project',
      ),
      dict({
      }),
    ),
    _Call(
      'set_info_string',
      tuple(
        'RENDER_PATTERN',
        'Stub Song Title (A Cappella).tmp',
      ),
      dict({
      }),
    ),
    _Call(
      'perform_action',
      tuple(
        42230,
      ),
      dict({
      }),
    ),
    _Call(
      'set_info_string',
      tuple(
        'RENDER_PATTERN',
        '$project',
      ),
      dict({
      }),
    ),
    _Call(
      'save',
      tuple(
      ),
      dict({
      }),
    ),
  ])
# ---
# name: test_main_filenames_all_versions.2
  _CallList([
    _Call(
      tuple(
        list([
          'ffmpeg',
          '-i',
          'TMP_PATH_HERE/Stub Song Title/Stub Song Title.wav',
          '-filter:a',
          'volumedetect,ebur128=framelog=verbose',
          '-hide_banner',
          '-nostats',
          '-f',
          'null',
          '/dev/null',
        ]),
      ),
      dict({
        'check': True,
        'stderr': -1,
        'text': True,
      }),
    ),
    _Call(
      tuple(
        list([
          'ffmpeg',
          '-i',
          'TMP_PATH_HERE/Stub Song Title/Stub Song Title (Instrumental).wav',
          '-filter:a',
          'volumedetect,ebur128=framelog=verbose',
          '-hide_banner',
          '-nostats',
          '-f',
          'null',
          '/dev/null',
        ]),
      ),
      dict({
        'check': True,
        'stderr': -1,
        'text': True,
      }),
    ),
    _Call(
      tuple(
        list([
          'ffmpeg',
          '-i',
          'TMP_PATH_HERE/Stub Song Title/Stub Song Title (A Cappella).wav',
          '-filter:a',
          'areverse,atrim=start=0.2,silenceremove=start_periods=1:start_silence=3.0:start_threshold=0.02,areverse,atrim=start=0.2,silenceremove=start_periods=1:start_silence=1.0:start_threshold=0.02',
          'TMP_PATH_HERE/Stub Song Title/Stub Song Title (A Cappella).wav.tmp.wav',
        ]),
      ),
      dict({
        'check': True,
        'stderr': -1,
        'text': True,
      }),
    ),
    _Call(
      tuple(
        list([
          'ffmpeg',
          '-i',
          'TMP_PATH_HERE/Stub Song Title/Stub Song Title (A Cappella).wav',
          '-filter:a',
          'volumedetect,ebur128=framelog=verbose',
          '-hide_banner',
          '-nostats',
          '-f',
          'null',
          '/dev/null',
        ]),
      ),
      dict({
        'check': True,
        'stderr': -1,
        'text': True,
      }),
    ),
    _Call(
      tuple(
        list([
          'ffmpeg',
          '-i',
          'TMP_PATH_HERE/Stub Song Title/Stub Song Title.wav',
          '-filter:a',
          'volumedetect,ebur128=framelog=verbose',
          '-hide_banner',
          '-nostats',
          '-f',
          'null',
          '/dev/null',
        ]),
      ),
      dict({
        'check': True,
        'stderr': -1,
        'text': True,
      }),
    ),
    _Call(
      tuple(
        list([
          'ffmpeg',
          '-i',
          'TMP_PATH_HERE/Stub Song Title/Stub Song Title.wav',
          '-filter:a',
          'volumedetect,ebur128=framelog=verbose',
          '-hide_banner',
          '-nostats',
          '-f',
          'null',
          '/dev/null',
        ]),
      ),
      dict({
        'check': True,
        'stderr': -1,
        'text': True,
      }),
    ),
    _Call(
      tuple(
        list([
          'ffmpeg',
          '-i',
          'TMP_PATH_HERE/Stub Song Title/Stub Song Title (Instrumental).wav',
          '-filter:a',
          'volumedetect,ebur128=framelog=verbose',
          '-hide_banner',
          '-nostats',
          '-f',
          'null',
          '/dev/null',
        ]),
      ),
      dict({
        'check': True,
        'stderr': -1,
        'text': True,
      }),
    ),
    _Call(
      tuple(
        list([
          'ffmpeg',
          '-i',
          'TMP_PATH_HERE/Stub Song Title/Stub Song Title (Instrumental).wav',
          '-filter:a',
          'volumedetect,ebur128=framelog=verbose',
          '-hide_banner',
          '-nostats',
          '-f',
          'null',
          '/dev/null',
        ]),
      ),
      dict({
        'check': True,
        'stderr': -1,
        'text': True,
      }),
    ),
    _Call(
      tuple(
        list([
          'ffmpeg',
          '-i',
          'TMP_PATH_HERE/Stub Song Title/Stub Song Title (A Cappella).wav',
          '-filter:a',
          'volumedetect,ebur128=framelog=verbose',
          '-hide_banner',
          '-nostats',
          '-f',
          'null',
          '/dev/null',
        ]),
      ),
      dict({
        'check': True,
        'stderr': -1,
        'text': True,
      }),
    ),
    _Call(
      tuple(
        list([
          'ffmpeg',
          '-i',
          'TMP_PATH_HERE/Stub Song Title/Stub Song Title (A Cappella).wav',
          '-filter:a',
          'areverse,atrim=start=0.2,silenceremove=start_periods=1:start_silence=3.0:start_threshold=0.02,areverse,atrim=start=0.2,silenceremove=start_periods=1:start_silence=1.0:start_threshold=0.02',
          'TMP_PATH_HERE/Stub Song Title/Stub Song Title (A Cappella).wav.tmp.wav',
        ]),
      ),
      dict({
        'check': True,
        'stderr': -1,
        'text': True,
      }),
    ),
    _Call(
      tuple(
        list([
          'ffmpeg',
          '-i',
          'TMP_PATH_HERE/Stub Song Title/Stub Song Title (A Cappella).wav',
          '-filter:a',
          'volumedetect,ebur128=framelog=verbose',
          '-hide_banner',
          '-nostats',
          '-f',
          'null',
          '/dev/null',
        ]),
      ),
      dict({
        'check': True,
        'stderr': -1,
        'text': True,
      }),
    ),
  ])
# ---
# name: test_main_main_version
  '''
  Stub Song Title
  TMP_PATH_HERE/Stub Song Title/Stub Song Title.wav
             ╷        ╷        
             │ Before │ After  
  ╶──────────┼────────┼───────╴
    duration │        │ 1.0    
    size     │        │ 42.0   
             ╵        ╵        
   Rendered in 0:00:00, a infx 
             speedup           
  
  '''
# ---
# name: test_main_main_version.1
  _CallList([
    _Call(
      'set_info_string',
      tuple(
        'RENDER_PATTERN',
        'Stub Song Title.tmp',
      ),
      dict({
      }),
    ),
    _Call(
      'perform_action',
      tuple(
        42230,
      ),
      dict({
      }),
    ),
    _Call(
      'set_info_string',
      tuple(
        'RENDER_PATTERN',
        '$project',
      ),
      dict({
      }),
    ),
    _Call(
      'save',
      tuple(
      ),
      dict({
      }),
    ),
  ])
# ---
# name: test_main_main_version.2
  _CallList([
    _Call(
      tuple(
        list([
          'ffmpeg',
          '-i',
          'TMP_PATH_HERE/Stub Song Title/Stub Song Title.wav',
          '-filter:a',
          'volumedetect,ebur128=framelog=verbose',
          '-hide_banner',
          '-nostats',
          '-f',
          'null',
          '/dev/null',
        ]),
      ),
      dict({
        'check': True,
        'stderr': -1,
        'text': True,
      }),
    ),
  ])
# ---
# name: test_main_mocked_calls
  dict({
    'duration_delta': _CallList([
    ]),
    'get_int_config_var': _CallList([
      _Call(
        '',
        tuple(
          'offlineinact',
          -666,
        ),
        dict({
        }),
      ),
      _Call(
        '',
        tuple(
          'runafterstop',
          -666,
        ),
        dict({
        }),
      ),
      _Call(
        '',
        tuple(
          'runallonstop',
          -666,
        ),
        dict({
        }),
      ),
      _Call(
        '',
        tuple(
          'runafterstop',
          -666,
        ),
        dict({
        }),
      ),
      _Call(
        '',
        tuple(
          'runallonstop',
          -666,
        ),
        dict({
        }),
      ),
      _Call(
        '',
        tuple(
          'runafterstop',
          -666,
        ),
        dict({
        }),
      ),
      _Call(
        '',
        tuple(
          'runallonstop',
          -666,
        ),
        dict({
        }),
      ),
    ]),
    'project': _CallList([
      _Call(
        'set_info_string',
        tuple(
          'RENDER_PATTERN',
          'Stub Song Title.tmp',
        ),
        dict({
        }),
      ),
      _Call(
        'perform_action',
        tuple(
          42230,
        ),
        dict({
        }),
      ),
      _Call(
        'set_info_string',
        tuple(
          'RENDER_PATTERN',
          '$project',
        ),
        dict({
        }),
      ),
      _Call(
        'set_info_string',
        tuple(
          'RENDER_PATTERN',
          'Stub Song Title (Instrumental).tmp',
        ),
        dict({
        }),
      ),
      _Call(
        'perform_action',
        tuple(
          42230,
        ),
        dict({
        }),
      ),
      _Call(
        'set_info_string',
        tuple(
          'RENDER_PATTERN',
          '$project',
        ),
        dict({
        }),
      ),
      _Call(
        'set_info_string',
        tuple(
          'RENDER_PATTERN',
          'Stub Song Title (A Cappella).tmp',
        ),
        dict({
        }),
      ),
      _Call(
        'perform_action',
        tuple(
          42230,
        ),
        dict({
        }),
      ),
      _Call(
        'set_info_string',
        tuple(
          'RENDER_PATTERN',
          '$project',
        ),
        dict({
        }),
      ),
      _Call(
        'save',
        tuple(
        ),
        dict({
        }),
      ),
    ]),
    'set_int_config_var': _CallList([
      _Call(
        '',
        tuple(
          'runafterstop',
          0,
        ),
        dict({
        }),
      ),
      _Call(
        '',
        tuple(
          'runallonstop',
          0,
        ),
        dict({
        }),
      ),
      _Call(
        '',
        tuple(
          'runafterstop',
          999,
        ),
        dict({
        }),
      ),
      _Call(
        '',
        tuple(
          'runallonstop',
          999,
        ),
        dict({
        }),
      ),
      _Call(
        '',
        tuple(
          'runafterstop',
          0,
        ),
        dict({
        }),
      ),
      _Call(
        '',
        tuple(
          'runallonstop',
          0,
        ),
        dict({
        }),
      ),
      _Call(
        '',
        tuple(
          'runafterstop',
          999,
        ),
        dict({
        }),
      ),
      _Call(
        '',
        tuple(
          'runallonstop',
          999,
        ),
        dict({
        }),
      ),
      _Call(
        '',
        tuple(
          'runafterstop',
          0,
        ),
        dict({
        }),
      ),
      _Call(
        '',
        tuple(
          'runallonstop',
          0,
        ),
        dict({
        }),
      ),
      _Call(
        '',
        tuple(
          'runafterstop',
          999,
        ),
        dict({
        }),
      ),
      _Call(
        '',
        tuple(
          'runallonstop',
          999,
        ),
        dict({
        }),
      ),
    ]),
    'upload': _CallList([
      _Call(
        '',
        tuple(
          'stub-fake-token',
          list([
            'TMP_PATH_HERE/Stub Song Title/Stub Song Title.wav',
            'TMP_PATH_HERE/Stub Song Title/Stub Song Title (Instrumental).wav',
            'TMP_PATH_HERE/Stub Song Title/Stub Song Title (A Cappella).wav',
          ]),
        ),
        dict({
        }),
      ),
    ]),
  })
# ---
# name: test_main_noop
  '''
  Usage: render [OPTIONS] [PROJECT_DIRS]...
  Try 'render --help' for help.
  
  Error: nothing to render
  
  '''
# ---
# name: test_main_noop.1
  _CallList([
  ])
# ---
# name: test_render_result_render_speedup
  _CallList([
    _Call(
      tuple(
        list([
          'ffprobe',
          '-i',
          'TMP_PATH_HERE',
          '-show_entries',
          'format=duration',
        ]),
      ),
      dict({
        'capture_output': True,
        'check': True,
        'text': True,
      }),
    ),
  ])
# ---
